import utime0xd
>>> utime.sleep(20)0xd
>>> hello()0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'hello' isn't defined0xd
>>> 0x160xfffd0xfffd0x10xfffd0xfffdi0xfffd40xfffdq0x8+F0xfffd0xc0xe0xfffd0xfffd0xfffd0xfffd0xfffd0xfffd0x17k0xc0xfffd0x170xfffd0x0ac0x0vY0xfffd0xfffd0xfffd0xfffd0xfffd0x120xfffd0xfffdb0xfffd.00x1\00x80x10jA0xfffd0x0\`0xc0x8K0x13D0xfffdq0xfffdA0xfffd0x2B0x10xfffd0xfffd0xfffdAP0x20xfffd0xfffd0x9w0xfffd-\0xfffd0xfffd^0xfffd0xfffdV0xfffd0x70xfffdE0xfffd0xfffd0x17G-0xfffdD0x80xfffd0xfffd0x140xfffd0xfffd0x4x@0xfffd0xfffdh0xc0xfffd80xc0xfffdN0x13q
0x130xfffd0xfffd0xfffd90xfffd0xfffd0xb0xfffd0xfffdp0xfffd90x40x1]0xfffd0x0X0xfffdS0x15n`t0x90xfffd0xfffd<0x17"0x10xfffd0x10x90x00xfffdq0xfffd0xfffd0x170xfffd0x14!r0xfffd0x12D0xfffd0x30xfffd0x30xfffd0xfffd"0x1p0xfffdB0xfffd.0xfffd0xfffd0xfffd0x5[0xfffd0xfffd0xfffd*0xfffd+0xfffd0xfffd\0xfffd0xfffdn(0xfffd0xfffdaU0xfffd0xfffd0x60xfffd0xfffd0xfffd7ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
raw REPL; CTRL-B to exit0xd
>0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevelets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import timesource /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import timesource /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> 0xd
>>> 0xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> 0xd
>>> ###############0xd
>>> # Constants0xd
>>> ###############0xd
>>> 0xd
>>> OZ_FULL             = const(16)0xd
>>> INIT_SAMPES         = const(50)0xd
>>> NUM_SAMPLES         = const(15)0xd
>>> RND_PLCS            = const(1)0xd
>>> DE_BNC_DELAY        = const(250)0xd
>>> 0xd
>>> BTN                 = const(26)0xd
>>> DE_BNC_TMR          = const(0)0xd
>>> CHK_LVL_TMR         = const(1)0xd
>>> 0xd
>>> BTN_ACTION_IN_PRG   = const(99)0xd
>>> BTN_UNPRESSED       = const(0)0xd
>>> BTN_PRESSED         = const(1)0xd
>>> BTN_GOT_EMPTY       = const(2)0xd
>>> BTN_GOT_FULL        = const(3)0xd
>>> BTN_CALI_IN_PRG_3   = const(4)0xd
>>> 0xd
>>> SCL_PIN             = const(21)0xd
>>> SDA_PIN             = const(22)0xd
>>> 0xd
>>> X_THRESH            = const(300)0xd
>>> Y_THRESH            = const(300)0xd
>>> Z_THRESH            = const(300)0xd
>>> 0xd
>>> CALI_F_NAME         = "calibration.txt"0xd
>>> SETTINGS_DIR_NAME   = "/dumb_cup"0xd
>>> 0xd
>>> ###############0xd
>>> # Methods0xd
>>> ###############0xd
>>> def map_val(x, in_min, in_max, out_min, out_max):0xd
>>> return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min0x80x1b[K0xd
>>> print("Test")0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> 0xd
>>> import utime0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0Xsource /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (629) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> 0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> 0xd
>>> ###############0xd
>>> # Constants0xd
>>> ###############0xd
>>> 0xd
>>> OZ_FULL             = const(16)0xd
>>> INIT_SAMPES         = const(50)0xd
>>> NUM_SAMPLES         = const(15)0xd
>>> RND_PLCS            = const(1)0xd
>>> DE_BNC_DELAY        = const(250)0xd
>>> 0xd
>>> BTN                 = const(26)0xd
>>> DE_BNC_TMR          = const(0)0xd
>>> CHK_LVL_TMR         = const(1)0xd
>>> 0xd
>>> BTN_ACTION_IN_PRG   = const(99)0xd
>>> BTN_UNPRESSED       = const(0)0xd
>>> BTN_PRESSED         = const(1)0xd
>>> BTN_GOT_EMPTY       = const(2)0xd
>>> BTN_GOT_FULL        = const(3)0xd
>>> BTN_CALI_IN_PRG_3   = const(4)0xd
>>> 0xd
>>> SCL_PIN             = const(21)0xd
>>> SDA_PIN             = const(22)0xd
>>> 0xd
>>> X_THRESH            = const(300)0xd
>>> Y_THRESH            = const(300)0xd
>>> Z_THRESH            = const(300)0xd
>>> 0xd
>>> CALI_F_NAME         = "calibration.txt"0xd
>>> SETTINGS_DIR_NAME   = "/dumb_cup"0xd
>>> 0xd
>>> ###############0xd
>>> # Methods0xd
>>> ###############0xd
>>> def map_val(x, in_min, in_max, out_min, out_max):0xd
...     source /home/ladvien/miniconda/bin/activate0xd
...     conda activate base0xd
...     ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> 0xd
>>> ###############0xd
>>> # Constants0xd
>>> ###############0xd
>>> 0xd
>>> OZ_FULL             = const(16)0xd
>>> INIT_SAMPES         = const(50)0xd
>>> NUM_SAMPLES         = const(15)0xd
>>> RND_PLCS            = const(1)0xd
>>> DE_BNC_DELAY        = const(250)0xd
>>> 0xd
>>> BTN                 = const(26)0xd
>>> DE_BNC_TMR          = const(0)0xd
>>> CHK_LVL_TMR         = const(1)0xd
>>> 0xd
>>> BTN_ACTION_IN_PRG   = const(99)0xd
>>> BTN_UNPRESSED       = const(0)0xd
>>> BTN_PRESSED         = const(1)0xd
>>> BTN_GOT_EMPTY       = const(2)0xd
>>> BTN_GOT_FULL        = const(3)0xd
>>> BTN_CALI_IN_PRG_3   = const(4)0xd
>>> 0xd
>>> SCL_PIN             = const(21)0xd
>>> SDA_PIN             = const(22)0xd
>>> 0xd
>>> X_THRESH            = const(300)0xd
>>> Y_THRESH            = const(300)0xd
>>> Z_THRESH            = const(300)0xd
>>> 0xd
>>> CALI_F_NAME         = "calibration.txt"0xd
>>> SETTINGS_DIR_NAME   = "/dumb_cup"0xd
>>> 0xd
>>> ###############0xd
>>> # Methods0xd
>>> ###############0xd
>>> def map_val(x, in_min, in_max, out_min, out_max):0xd
...     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min0x80x1b[K0xd
...     print("Test")0xd
...     0xd
...     def on_not_level(x: int, y: int, z: int):0xd
...         print("Not level")0xd
...         print('x:', x, 'y:', y, 'z:',z ,'uint:mg')0x80x1b[K0xd
...         0xd
...         source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import uos0x80x1b[K0x80x1b[Ktime0xd
>>> utime0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[Kutimne0x80x1b[Ke0x80x1b[K0x80x1b[Ke.sleep(15)0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (629) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():source /home/ladvien/miniconda/bin/activate0xd
... conda activate base0xd
... ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (629) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     0xd
...     print('hello')0x80x1b[K0xd
...     0xd
...     ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0x80x1b[K0xd
...     0x80x80x80x80x1b[K)0xd
... 0xd
>>> hell()0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'hell' isn't defined0xd
>>> hello()0xd
hello0xd
>>> def hello():0xd
...     print('hello')0x80x1b[K0xd
...     0xd
...     0xd
... 0xd
... 0xd
... 0xd
... 0xd
... 0xd
... 0xd
... )0xd
... 0xd
>>> 0xd
>>> def hello():0xd
...     print('hello')0x80x1b[K0xd
...     print('small talk')0x80x1b[K0xd
...     print('goodbye')0xd
...     0x80x80x80x80x1b[K0xd
... source /home/ladvien/miniconda/bin/activate0xd
... conda activate base0xd
... ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello') 0xd
...     print('small talk')0xd
...     0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> import u0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[Kdef hello():0xd
...     0xd
...     0xd
... 0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 40xd
SyntaxError: invalid syntax0xd
>>> def hello():0xd
...     print('hello')0xd
...     0x80x80x80x80x1b[K0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hell0()0x80x1b[K0x80x1b[K0x80x1b[Ko():0xd
...     print(hello0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K0x80x1b[K'hello')0xd
...     0x80x80x80x80x1b[K0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (592) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (592) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
raw REPL; CTRL-B to exit0xd
>0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     if True:0xd
...         print('more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     if True:0xd
...         print('more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> hello()0xd
hello0xd
small talk0xd
more small talk0xd
>>> def hello():0xd
...     print(h0x80x1b[K'hello')0xd
...     print('small'0x80x1b[K talk')0xd
...     if True:0xd
...         print(I'0x80x1b[K0x80x1b[K'more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[Kprint('goodbye')0xd
... 0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 60xd
SyntaxError: invalid syntax0xd
>>> print('goodbye')0x1b[16D        print('more small talk')0x1b[32D0x1b[K    if True:0x1b[12D    print('small talk')0x1b[23D0x1b[K    print('hello')0x1b[18D0x1b[Kdef hello():0x1b[12D0x1b[Khello()0x1b[7Ddef hello():0xd
...     0x80x80x80x8def hello():0x1b[12Dprint('goodbye')0x1b[16D        print('more small talk')0x1b[32D0x1b[K    if True:0x1b[12D    print('small talk')0xd
...     0x80x80x80x8    print('small talk')0x1b[23D0x1b[Kdef hello():0x1b[12Dprint('goodbye')0x1b[16D        print('more small talk')0x1b[32D0x1b[K    if True:0xd
...         0x1b[8D    if True:0x1b[12D    print('small talk')0x1b[23D0x1b[Kdef hello():0x1b[12Dprint('goodbye')0x1b[16D        print('more small talk')0xd
...         0x1b[8D        print('more small talk')0x1b[32D0x1b[K    if True:0x1b[12D    print('small talk')0x1b[23D0x1b[Kdef hello():0x1b[12Dprint('goodbye')0x1b[16D        print('more small talk')0x1b[32D0x1b[K    if True:0x1b[12D    print('small talk')0x1b[23D0x1b[K    if True:0x1b[12D        print('more small talk')0x1b[32D0x1b[Kprint('goodbye')0x1b[16D0x1b[Kdef hello():0x1b[12D    print('small talk')0x1b[23D0x1b[K    if True:0x1b[12D        print('more small talk')0x1b[32D0x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> 0xd
>>> hell00x80x1b[Ko()0xd
small talk0xd
more small talk0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     if True:0xd
...         print('more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> hello()0xd
hello0xd
small talk0xd
more small talk0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     if True:0xd
...         print('more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> hello()0xd
hello0xd
small talk0xd
more small talk0xd
>>> def hello():0xd
...     print('hello')0xd
...     print('small talk')0xd
...     if True:0xd
...         print('more small talk')0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> print('goodbye')0xd
goodbye0xd
>>> source /home/ladvien/miniconda/bin/activate0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'source' isn't defined0xd
>>> conda activate base0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> ets Jun  8 2016 00:22:570xd
0xd
rst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)0xd
configsip: 0, SPIWP:0xee0xd
clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x000xd
mode:DIO, clock div:20xd
load:0x3fff0018,len:40xd
load:0x3fff001c,len:49880xd
load:0x40078000,len:104040xd
load:0x40080400,len:56800xd
entry 0x400806bc0xd
0x1b[0;32mI (529) cpu_start: Pro cpu up.0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Application information:0x1b[0m0xd
0x1b[0;32mI (529) cpu_start: Compile time:     Dec 20 2019 07:56:380x1b[0m0xd
0x1b[0;32mI (532) cpu_start: ELF file SHA256:  0000000000000000...0x1b[0m0xd
0x1b[0;32mI (538) cpu_start: ESP-IDF:          v4.0-beta10x1b[0m0xd
0x1b[0;32mI (544) cpu_start: Starting app cpu, entry point is 0x400830140x1b[0m0xd
0x1b[0;32mI (0) cpu_start: App cpu up.0x1b[0m0xd
0x1b[0;32mI (554) heap_init: Initializing. RAM available for dynamic allocation:0x1b[0m0xd
0x1b[0;32mI (561) heap_init: At 3FFAFF10 len 000000F0 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (567) heap_init: At 3FFB6388 len 00001C78 (7 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (573) heap_init: At 3FFB9A20 len 00004108 (16 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (579) heap_init: At 3FFBDB5C len 00000004 (0 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (585) heap_init: At 3FFCC8A0 len 00013760 (77 KiB): DRAM0x1b[0m0xd
0x1b[0;32mI (591) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (598) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM0x1b[0m0xd
0x1b[0;32mI (604) heap_init: At 40099FB8 len 00006048 (24 KiB): IRAM0x1b[0m0xd
0x1b[0;32mI (610) cpu_start: Pro cpu start user code0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: detected chip: generic0x1b[0m0xd
0x1b[0;32mI (629) spi_flash: flash io: dio0x1b[0m0xd
0x1b[0;32mI (630) cpu_start: Chip Revision: 10x1b[0m0xd
0x1b[0;33mW (631) cpu_start: Chip revision is higher than the one configured in menuconfig. Suggest to upgrade it.0x1b[0m0xd
0x1b[0;32mI (642) cpu_start: Starting scheduler on PRO CPU.0x1b[0m0xd
0x1b[0;32mI (0) cpu_start: Starting scheduler on APP CPU.0x1b[0m0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> ###############0xd
>>> # Constants0xd
>>> ###############0xd
>>> OZ_FULL             = const(16)0xd
>>> INIT_SAMPES         = const(50)0xd
>>> NUM_SAMPLES         = const(15)0xd
>>> RND_PLCS            = const(1)0xd
>>> DE_BNC_DELAY        = const(250)0xd
>>> BTN                 = const(26)0xd
>>> DE_BNC_TMR          = const(0)0xd
>>> CHK_LVL_TMR         = const(1)0xd
>>> BTN_ACTION_IN_PRG   = const(99)0xd
>>> BTN_UNPRESSED       = const(0)0xd
>>> BTN_PRESSED         = const(1)0xd
>>> BTN_GOT_EMPTY       = const(2)0xd
>>> BTN_GOT_FULL        = const(3)0xd
>>> BTN_CALI_IN_PRG_3   = const(4)0xd
>>> SCL_PIN             = const(21)0xd
>>> SDA_PIN             = const(22)0xd
>>> X_THRESH            = const(300)0xd
>>> Y_THRESH            = const(300)0xd
>>> Z_THRESH            = const(300)0xd
>>> CALI_F_NAME         = "calibration.txt"0xd
>>> SETTINGS_DIR_NAME   = "/dumb_cup"0xd
>>> ###############0xd
>>> # Methods0xd
>>> ###############0xd
>>> def map_val(x, in_min, in_max, out_min, out_max):0xd
...     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min0xd
...     0x80x80x80x80x1b[K0xd
>>> print("Test")0xd
Test0xd
>>> def on_not_level(x: int, y: int, z: int):0xd
...     print("Not level")0xd
...     print('x:', x, 'y:', y, 'z:',z ,'uint:mg')0xd
...     0x80x80x80x80x1b[K0xd
>>> def measure(tof: ADXL345, num_samples: int, round_num: int) -> int:0xd
...     global vol_cof0xd
...     samples = []    0xd
...     # if len(samples) >= NUM_SAMPLES + 1: samples.pop(0)0xd
...     for i in range(num_samples):0xd
...         samples.append(tof.read())0xd
...         dist = sum(samples) / len(samples) * vol_cof0xd
...         0x80x80x80x80x1b[K0xd
...     dist = map_val(dist, empty_val, full_val, 0, OZ_FULL)0xd
...     return round(dist, round_num)0xd
...     0x80x80x80x80x1b[K0xd
>>> def blink(led, num: int = 1, delay: int = 200):0xd
...     for i in range(num):0xd
...         led.on()0xd
...         time.sleep_ms(delay)0xd
...         led.off()0xd
...         time.sleep_ms(delay)0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> ################0xd
>>> # Initialization 0xd
>>> ################0xd
>>> i2c = I2C(scl = Pin(SCL_PIN), sda = Pin(SDA_PIN), freq = 20000, timeout = 2000)0xd
>>> # Accelerometer0xd
>>> a345 = ADXL345(i2c)0xd
ADXL345 found.0xd
Warming up...0xd
ADXL345 ready.0xd
>>> dd = SpiritLevel(a345, on_not_level, X_THRESH, Y_THRESH, Z_THRESH)0xd
>>> # Time-of-Flight0xd
>>> tof = VL53L0X(i2c)0xd
>>> tof.set_Vcsel_pulse_period(tof.vcsel_period_type[0], 18)0xd
True0xd
>>> tof.set_Vcsel_pulse_period(tof.vcsel_period_type[1], 14)0xd
True0xd
>>> tof.start()0xd
>>> # Blinker0xd
>>> led = Pin(2, Pin.OUT)0xd
>>> # Main button.0xd
>>> btn = Pin(BTN, Pin.IN, Pin.PULL_DOWN)0xd
>>> ###############0xd
>>> # Calibration0xd
>>> ###############0xd
>>> de_bnc_tmr = Timer(DE_BNC_TMR)0xd
>>> de_bnc_flag = False0xd
>>> def dnc_timer_expr(timer):0xd
...     global de_bnc_flag0xd
...     de_bnc_flag = False0xd
...     0x80x80x80x80x1b[K0xd
>>> import time0xd
>>> from machine import I2C, Pin, Timer0xd
>>> from dumb_cup.v53l0x import VL53L0X0xd
>>> from dumb_cup.adxl345 import ADXL3450xd
>>> from dumb_cup.spirit_level import SpiritLevel0xd
>>> ###############0xd
>>> # Constants0xd
>>> ###############0xd
>>> OZ_FULL             = const(16)0xd
>>> INIT_SAMPES         = const(50)0xd
>>> NUM_SAMPLES         = const(15)0xd
>>> RND_PLCS            = const(1)0xd
>>> DE_BNC_DELAY        = const(250)0xd
>>> BTN                 = const(26)0xd
>>> DE_BNC_TMR          = const(0)0xd
>>> CHK_LVL_TMR         = const(1)0xd
>>> BTN_ACTION_IN_PRG   = const(99)0xd
>>> BTN_UNPRESSED       = const(0)0xd
>>> BTN_PRESSED         = const(1)0xd
>>> BTN_GOT_EMPTY       = const(2)0xd
>>> BTN_GOT_FULL        = const(3)0xd
>>> BTN_CALI_IN_PRG_3   = const(4)0xd
>>> SCL_PIN             = const(21)0xd
>>> SDA_PIN             = const(22)0xd
>>> X_THRESH            = const(300)0xd
>>> Y_THRESH            = const(300)0xd
>>> Z_THRESH            = const(300)0xd
>>> CALI_F_NAME         = "calibration.txt"0xd
>>> SETTINGS_DIR_NAME   = "/dumb_cup"0xd
>>> ###############0xd
>>> # Methods0xd
>>> ###############0xd
>>> def map_val(x, in_min, in_max, out_min, out_max):0xd
...     return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min0xd
...     0x80x80x80x80x1b[K0xd
>>> print("Test")0xd
Test0xd
>>> def on_not_level(x: int, y: int, z: int):0xd
...     print("Not level")0xd
...     print('x:', x, 'y:', y, 'z:',z ,'uint:mg')0xd
...     0x80x80x80x80x1b[K0xd
>>> def measure(tof: ADXL345, num_samples: int, round_num: int) -> int:0xd
...     global vol_cof0xd
...     samples = []    0xd
...     # if len(samples) >= NUM_SAMPLES + 1: samples.pop(0)0xd
...     for i in range(num_samples):0xd
...         samples.append(tof.read())0xd
...         dist = sum(samples) / len(samples) * vol_cof0xd
...         0x80x80x80x80x1b[K0xd
...     dist = map_val(dist, empty_val, full_val, 0, OZ_FULL)0xd
...     return round(dist, round_num)0xd
...     0x80x80x80x80x1b[K0xd
>>> def blink(led, num: int = 1, delay: int = 200):0xd
...     for i in range(num):0xd
...         led.on()0xd
...         time.sleep_ms(delay)0xd
...         led.off()0xd
...         time.sleep_ms(delay)0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> ################0xd
>>> # Initialization 0xd
>>> ################0xd
>>> i2c = I2C(scl = Pin(SCL_PIN), sda = Pin(SDA_PIN), freq = 20000, timeout = 2000)0xd
>>> # Accelerometer0xd
>>> a345 = ADXL345(i2c)0xd
ADXL345 found.0xd
Warming up...0xd
ADXL345 ready.0xd
>>> dd = SpiritLevel(a345, on_not_level, X_THRESH, Y_THRESH, Z_THRESH)0xd
>>> # Time-of-Flight0xd
>>> tof = VL53L0X(i2c)0xd
>>> tof.set_Vcsel_pulse_period(tof.vcsel_period_type[0], 18)0xd
True0xd
>>> tof.set_Vcsel_pulse_period(tof.vcsel_period_type[1], 14)0xd
True0xd
>>> tof.start()0xd
>>> # Blinker0xd
>>> led = Pin(2, Pin.OUT)0xd
>>> # Main button.0xd
>>> btn = Pin(BTN, Pin.IN, Pin.PULL_DOWN)0xd
>>> ###############0xd
>>> # Calibration0xd
>>> ###############0xd
>>> de_bnc_tmr = Timer(DE_BNC_TMR)0xd
>>> de_bnc_flag = False0xd
>>> def dnc_timer_expr(timer):0xd
...     global de_bnc_flag0xd
...     de_bnc_flag = False0xd
...     0x80x80x80x80x1b[K0xd
>>> def on_btn(pin):0xd
...     global tof0xd
...     global de_bnc_flag0xd
...     global cali_file0xd
...     global btn_state0xd
...     global btn0xd
...     global led0xd
...     if not de_bnc_flag:0xd
...         # Turn on debounce timer.0xd
...         de_bnc_flag = True0xd
...         de_bnc_tmr.init(mode=Timer.ONE_SHOT, period=DE_BNC_DELAY, callback=dnc_timer_expr)0xd
...         if btn_state == BTN_UNPRESSED:0xd
...             btn_state = BTN_ACTION_IN_PRG0xd
...             # Erase old file.0xd
...             erase_cali()0xd
...             # Let the user know we are getting the 0xd
...             # depth of the cup.0xd
...             print("Getting measurements when empty.")0xd
...             blink(led, 5, 300)0xd
...             empty = measure(tof, NUM_SAMPLES, RND_PLCS)0xd
...             fs_write_val("empty", empty)0xd
...             btn_state = BTN_GOT_EMPTY0xd
...             0x80x80x80x80x1b[K0xd
...         elif btn_state == BTN_GOT_EMPTY:0xd
...             btn_state = BTN_ACTION_IN_PRG0xd
...             # Let the user know we are getting the 0xd
...             # depth of the cup.0xd
...             print("Getting measurements when full.")0xd
...             blink(led, 5, 300)0xd
...             full = measure(tof, NUM_SAMPLES, RND_PLCS)0xd
...             fs_write_val("full", full)0xd
...             btn_state = BTN_UNPRESSED0xd
...             0x80x80x80x80x1b[K0xd
...         elif btn_state == BTN_ACTION_IN_PRG:0xd
...             print("Busy")0xd
...             0x80x80x80x80x1b[K0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> def erase_cali():0xd
...     import os0xd
...     filepath = SETTINGS_DIR_NAME + "/" + CALI_F_NAME0xd
...     try:0xd
...         with open(filepath) as f:0xd
...             os.remove(filepath)0xd
...             0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
...     except:0xd
...         pass0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> def fs_write_val(key: str, value: str):0xd
...     import os0xd
...     filepath = SETTINGS_DIR_NAME + "/" + CALI_F_NAME0xd
...     write_type = "a"0xd
...     try:0xd
...         with open(filepath, write_type) as f:0xd
...             f.write("")0xd
...             0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
...     except OSError:0xd
...         os.mkdir(SETTINGS_DIR_NAME)0xd
...         write_type = "w"0xd
...         0x80x80x80x80x1b[K0xd
...     try:0xd
...         with open(filepath, write_type) as f:0xd
...             s = "{}={}\n".format(key, value)0xd
...             f.write(s)0xd
...             0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
...     except OSError:0xd
...         print("FS error.")0xd
...         0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> def fs_read_cali():0xd
...     import os0xd
...     filepath = SETTINGS_DIR_NAME + "/" + CALI_F_NAME0xd
...     with open(filepath, "r") as f:0xd
...         return f.readlines()0xd
...         0x80x80x80x80x1b[K0xd
...     return []0xd
...     0x80x80x80x80x1b[K0xd
>>> def uninstall():0xd
...     import os0xd
...     os.chdir("dumb_cup")0xd
...     for item in os.listdir():0xd
...         print(type(item))0xd
...         try:0xd
...             os.remove(item)0xd
...             0x80x80x80x80x1b[K0xd
...         except:0xd
...             os.rmdir(item)0xd
...             0x80x80x80x80x1b[K0x80x80x80x80x1b[K0x80x80x80x80x1b[K0xd
>>> btn_state = BTN_UNPRESSED0xd
>>> btn.irq(on_btn)0xd
<IRQ>0xd
>>> #####################0xd
>>> # Volume coefficient0xd
>>> #####################0xd
>>> def vol_cof():0xd
...     lines = fs_read_cali()0xd
...     for value in lines:       0xd
...     if "empty" in value: 0xd
...     empty_val = float(value.split("=")[1][0:-1])0xd
...     0x80x80x80x80x1b[K0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 40xd
SyntaxError: invalid syntax0xd
>>> elif "full" in value:0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 10xd
SyntaxError: invalid syntax0xd
>>> full_val = float(value.split("=")[1][0:-1])0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'value' isn't defined0xd
>>> 0xd
>>> return (empty_val, full_val)0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
SyntaxError: 'return' outside function0xd
>>> 0xd
>>> #####################0xd
>>> # Check Liquid Level0xd
>>> #####################0xd
>>> def chk_liq_lvl(timer):0xd
...     global old_lvl0xd
...     global cur_lvl0xd
...     global consumed0xd
...     global tof0xd
...     cur_lvl = measure(tof, NUM_SAMPLES, RND_PLCS)0xd
...     delta = round((cur_lvl - old_lvl), RND_PLCS)0xd
...     consumed += round(delta, RND_PLCS)0xd
...     print("Current: {} Delta: {} Consumed: {}".format(cur_lvl, delta, consumed))0xd
...     old_lvl = cur_lvl0xd
...     0x80x80x80x80x1b[K0xd
>>> ###############0xd
>>> # Calibration0xd
>>> ###############0xd
>>> empty_val, full_val = vol_cof()0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'vol_cof' isn't defined0xd
>>> volume = (full_val - empty_val) * -10xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'full_val' isn't defined0xd
>>> vol_cof = OZ_FULL / volume0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'volume' isn't defined0xd
>>> print("Initializing liquid gauge...")0xd
Initializing liquid gauge...0xd
>>> cur_lvl = measure(tof, INIT_SAMPES, RND_PLCS)0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
>>> old_lvl = cur_lvl0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'cur_lvl' isn't defined0xd
>>> consumed = 00xd
>>> print("Initial liquid level: {}".format(cur_lvl))0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 1, in <module>0xd
NameError: name 'cur_lvl' isn't defined0xd
>>> chk_liq_lvl_tmr = Timer(CHK_LVL_TMR)0xd
>>> chk_liq_lvl_tmr.init(mode=Timer.PERIODIC, period=3000, callback=chk_liq_lvl)0xd
>>> # To begin conversion we need a calibration sequence.0xd
>>> #   1. Have the user empty the cup and level it on counter.0xd
>>> #   2. Have the user fill the cup.0xd
>>> #   0xd
>>> #   We could use the empty_reading (-137) and full_reading (-63) to0xd
>>> #   calculate the linear volume of the cup (74).0xd
>>> #0xd
>>> #   abs(empty_reading) - abs(full_reading) = linear_volume0xd
>>> #0xd
>>> #   Then, we have two routes, we can convert linear_volume into0xd
>>> #   millimeters.  This would become linear_volume_mm.0xd
>>> #0xd
>>> #   We can then get the cup diameter in millimeters (80mm)0xd
>>> #   and multiply it by the linear_volume_mm, which should give0xd
>>> #   us total volume.0xd
>>> #0xd
>>> #   V = r^2h0xd
>>> #   cubic_mm = (cup_diameter / 2)^2  *  * linear_volume_mm 0xd
>>> #   cubic_mm = (40)^2 *  * 740xd
>>> #   cubic_mm = 1600 *  * 740xd
>>> #   cubic_mm = 5026.54 * 740xd
>>> #   cubic_mm = 371964.570xd
>>> #0xd
>>> #   To get ounces, multiply mm3 by 3.3814e-5.0xd
>>> #0xd
>>> #   ounces = 12.57761841430xd
>>> #0xd
>>> ###############0xd
>>> # Main Loop0xd
>>> ###############0xd
>>> while True:0xd
...     dd.calculate()0xd
...     0x80x80x80x80x1b[K0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Not level0xd
x: 0.0 y: 3.9 z: 951.6 uint:mg0xd
Not level0xd
x: 7.8 y: 0.0 z: -975.0 uint:mg0xd
Not level0xd
x: 3.9 y: 0.0 z: 994.5 uint:mg0xd
Not level0xd
x: 3.9 y: 3.9 z: 990.5999 uint:mg0xd
Not level0xd
x: 0.0 y: 0.0 z: -998.4 uint:mg0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Not level0xd
x: 7.8 y: 0.0 z: 986.7 uint:mg0xd
Not level0xd
x: 11.7 y: -58.5 z: 744.9 uint:mg0xd
Not level0xd
x: 54.6 y: -858.0 z: 159.9 uint:mg0xd
Not level0xd
x: -936.0 y: 19.5 z: -347.1 uint:mg0xd
Not level0xd
x: -105.3 y: 148.2 z: 331.5 uint:mg0xd
Not level0xd
x: 15.6 y: 39.0 z: -889.2 uint:mg0xd
Not level0xd
x: 7.8 y: 11.7 z: 951.6 uint:mg0xd
Not level0xd
x: 15.6 y: 0.0 z: 990.5999 uint:mg0xd
Not level0xd
x: 7.8 y: 3.9 z: 986.7 uint:mg0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Not level0xd
x: 3.9 y: 3.9 z: -998.4 uint:mg0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Not level0xd
x: 7.8 y: 3.9 z: -990.5999 uint:mg0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 6, in chk_liq_lvl0xd
  File "<stdin>", line 7, in measure0xd
NameError: name 'vol_cof' isn't defined0xd
Not level0xd
x: 3.9 y: 0.0 z: 986.7 uint:mg0xd
Traceback (most recent call last):0xd
  File "<stdin>", line 2, in <module>0xd
  File "dumb_cup/spirit_level.py", line 18, in calculate0xd
KeyboardInterrupt: 0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
>>> 0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 0xd
MPY: soft reboot0xd
MicroPython v1.12 on 2019-12-20; ESP32 module with ESP320xd
Type "help()" for more information.0xd
>>> 